model{


# response 0 = negative, response 1 = positive for infection
# state 1 = not infected, state 2 = infected


## A. state conditional responses; these depend on individual i so that random effects can be incorporated into the probabilities; they also need to depend on the current infection state [but maybe we can just include a time component though need to be careful to have time-invariant item response probabilities]

for (t in 1:T){
    for(i in 1:N){
      for(k in 1:K){
        tests[t,i,k]~dbern(crp[k,curState[t,i],i])
      }
    }
}

randMean<-mean(randIndRaw) # required to force the random effects to sum to 0

for(i in 1:N){
  for(state in 1:2){
    # we only have 2 responses, so do not really need to loop over them, we just take one as reference (0/1 response, 0 = reference = not infected, 1= infected; 0/1 = 1/2 for array indices)
	  # probabilities below are probabilities of testing positive given the current state
	  for(k in 1:K){
	    crp[k,state,i]<-expCrp[k,state,i]/(1+expCrp[k,state,i])
	    expCrp[k,state,i]<-exp(interceptStateCrp[k,state]+slopeRandCrp[k]*randInd[i])
    }
  }
      
  # individual random effects have a normal distribution; random effects are constrained to sum to 0
  randIndRaw[i] ~ dnorm(0,1) # for identifiability reasons the random effects have no hyperparameters - mean is contrained to be 0 anyway and variance of normal dist. is essentially just a scaling parameter that would get absorbed by the slope parameters...
  randInd[i] <- randIndRaw[i] - randMean
}

# The loop blow only runs for later easier extraction of random-effects averaged sensitivites and specificities
# NB not a proper marginalisation, but for this specific function and random effect, it's fine [ exp(x)/(exp(x)+exp(y)) = integrate(dnorm(u)*exp(x+u)/(exp(x+u)+exp(y+u)),lower=-Inf,upper=+inf) ].
# Example:
# margfun<-function(u){exp(1+u)/(exp(1+u)+exp(2+u))}
# intfun<-function(u){dnorm(u)*exp(1+u)/(exp(1+u)+exp(2+u))}
# margfun(0)
# integrate(f=intfun,lower=-20,upper=20)

for(state in 1:2){
  for(k in 1:K){
    crpNoRand[k,state]<-expCrpNoRand[k,state]/(1+expCrpNoRand[k,state])
		expCrpNoRand[k,state]<-exp(interceptStateCrp[k,state])
  }
}

# prior for the fixed intercepts and slopes for the random effects
for(k in 1:K){
  for(state in 1:2){
	  interceptStateCrp[k,state] ~ dt(0,1/100,1) # df=1, i.e Cauchy dist.
  }
  slopeRandCrp[k] ~ dt(0,1/100,1) # df=1, i.e Cauchy dist.
}


## B. transition probabilities (time homogeneous transition matrix model) - note we treat these as parameters to be estimated, so we just use them to derive the current state, then set non-informative priors on them

for(i in 1:N){
  curState[1,i] ~ dcat(c(1-pInfState[1,i],pInfState[1,i]))
  pInfState[1,i]<-pInfInit

  for(t in 2:T){
    curState[t,i] ~ dcat(c(1-pInfState[t,i],pInfState[t,i]))
	  pInfState[t,i]<-ifelse(curState[t-1,i]==1,pUninf2Inf,pInf2Inf)
  }
}

#pInf2Inf ~ dunif(0,0.5) # uninformative, but forces this to be less than 0.5 - acknowledges that infection is more unlikely than likely; could have been a solution to the label switching issue
pInf2Inf ~ dbeta(0.5,0.5) # Jeffrey's prior for a probability parameter
#pUninf2Inf ~ dunif(0,0.5) # uninformative, but forces this to be less than 0.5 - acknowledges that infection is more unlikely than likely; could have been a solution to the label switching issue
pUninf2Inf ~ dbeta(0.5,0.5) # Jeffrey's prior for a probability parameter

## C. initial infection state probability - a parameter to be estimated, so just slap a non-informative prior on it
pInfInit<-pUninf2Inf/(1+pUninf2Inf-pInf2Inf) # stationary solution; required for model identifiability

}
